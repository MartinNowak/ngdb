# -*- Makefile -*-

.PHONY:	clean

CC=cc
CFLAGS=-g -O -msse3 -mfpmath=sse

CXX=c++
CXXFLAGS=-g -O -msse3 -mfpmath=sse

SelectOption(question, options, default) =
        if $(defined take_defaults)
                return $(default)
        while true
                print($"$(question) ($(options))? [$(default)] ")
                answer = $(gets $(stdin))
                if $(eq $(length $(answer)), 0)
                        answer = $(default)
                        export
                foreach (i, $(options))
                        if $(equal $(answer), $i)
                                return $(answer)
                println($"Please select one of $(options)")

static. =
	compilers = dmd gdc ldc
	comp = $(SelectOption Select compiler, $(compilers), dmd)
	export comp

#if $(not $(defined comp))
#	comp = dmd
#	export

switch $(comp)
case dmd
   DMD=dmd
   DFLAGS= -g
   LDFLAGS= -g
   export

case gdc
   DMD=gdmd
   DFLAGS= -g -version=GDC
   SPECS = $(file specs)
   LDFLAGS= -L-specs=$(SPECS)
   LDFLAGS= -g 
   export

case ldc
   LDCBASE=/home/dfr/src/ldc
   DMD=$(LDCBASE)/ldc/bin/ldmd
   DFLAGS= -g -I$(LDCBASE)/tangobos -version=tangobos
   LDFLAGS= -g 
   export

LIBS[]=
ELIBS[]=
INCLUDES[]=

ScanD(name) =
	deps[] =
	oname = $(replacesuffixes .d, .o, $(name))
	awk($(name))
	case $'import[[:space:]]*\([[:alpha:]][[:alnum:]]*(\.[[:alpha:]][[:alnum:]]*)*\)'
		dep = $(concat /, $(split '.', $1)).d
		if $(file-exists $(dep))
			deps[] += $(dep)
			export
	default
	println($"$(oname): $(deps)")

DObjfile(name) =
	ofile = $(name).o
	dfile = $(name).d

	.SCANNER: scan-d-$(basename $(dfile)): $(dfile) :value: $(digest-in-path-optional $(INCLUDES), $&)
		ScanD($<)
	$(ofile): $(dfile) :scanner: scan-d-$(basename $(dfile))
		$(DMD) -c $(DFLAGS) -of$@ $(absname $^)

	return $(ofile)

DObjfiles(files) =
	ofiles =

	foreach (i, $(files))
		ofiles += $(DObjfile $i)
		export

	return $(ofiles)

DProgram(name, files) =
	ofiles = $(DObjfiles $(files))
	$(name): $(ofiles) $(LIBS)
		$(DMD) $(LDFLAGS) -of$@ \
			$(filter %.o, $^) \
			$(LIBS) \
			$(addprefix -L-l, $(ELIBS))

	clean::
		rm -f $(name) $(ofiles)

	return $(name)

DLibrary(name, files) =
	libname = lib$(name).a
	$(libname): $(DObjfiles $(files))
		rm -f $@
		ar cr $@ $&

	return $(libname)

CObjfile(name) =
	ofile = $(name).o
	cfile = $(name).c

	.SCANNER: scan-c-$(basename $(cfile)): $(cfile) :value: $(digest-in-path-optional $(INCLUDES), $&)
		$(CC) $(CFLAGS) -MM $<
	$(ofile): $(cfile) :scanner: scan-c-$(basename $(cfile))
		$(CC) -c $(CFLAGS) -o $@ $(absname $^)

	return $(ofile)

CObjfiles(files) =
	ofiles =

	foreach (i, $(files))
		ofiles += $(CObjfile $i)
		export

	return $(ofiles)

CProgram(name, files) =
	ofiles = $(CObjfiles $(files))
	$(name): $(ofiles) $(LIBS)
		$(CC) $(LDFLAGS) -static -o $@ \
			$(filter %.o, $^) \
			$(LIBS) \
			$(addprefix -l, $(ELIBS))

	clean::
		rm -f $(name) $(ofiles)

	return $(name)

CXXObjfile(name) =
	ofile = $(name).o
	cxxfile = $(name).cpp

	.SCANNER: scan-cxx-$(basename $(cxxfile)): $(cxxfile) :value: $(digest-in-path-optional $(INCLUDES), $&)
		$(CXX) $(CXXFLAGS) -MM $<
	$(ofile): $(cxxfile) :scanner: scan-cxx-$(basename $(cxxfile))
		$(CXX) -c $(CXXFLAGS) -o $@ $(absname $^)

	return $(ofile)

CXXObjfiles(files) =
	ofiles =

	foreach (i, $(files))
		ofiles += $(CXXObjfile $i)
		export

	return $(ofiles)

CXXProgram(name, files) =
	ofiles = $(CXXObjfiles $(files))
	$(name): $(ofiles) $(LIBS)
		$(CXX) $(LDFLAGS) -o $@ \
			$(filter %.o, $^) \
			$(LIBS) \
			$(addprefix -l, $(ELIBS))

	clean::
		rm -f $(name) $(ofiles)

	return $(name)

.SUBDIRS:	.
